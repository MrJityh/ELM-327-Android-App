Index: app/src/main/java/com/obdelm327pro/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.obdelm327pro;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothDevice;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.os.PowerManager;\r\nimport android.os.StrictMode;\r\nimport android.preference.PreferenceManager;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.appbar.AppBarLayout;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.app.ActivityCompat;\r\n\r\nimport java.time.DayOfWeek;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n//for converting to CSV (new code)\r\nimport java.io.File;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.IOException;\r\n//for sending the data via wifi (new code)\r\nimport java.io.OutputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\n//more for the server\r\nimport android.os.AsyncTask;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\n//For date and time when saving csv\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n//for vin decoding\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"MainActivity\";\r\n\r\n    public static final int MESSAGE_STATE_CHANGE = 1;\r\n\r\n    /*0\tAutomatic protocol detection\r\n   1\tSAE J1850 PWM (41.6 kbaud)\r\n   2\tSAE J1850 VPW (10.4 kbaud)\r\n   3\tISO 9141-2 (5 baud init, 10.4 kbaud)\r\n   4\tISO 14230-4 KWP (5 baud init, 10.4 kbaud)\r\n   5\tISO 14230-4 KWP (fast init, 10.4 kbaud)\r\n   6\tISO 15765-4 CAN (11 bit ID, 500 kbaud)\r\n   7\tISO 15765-4 CAN (29 bit ID, 500 kbaud)\r\n   8\tISO 15765-4 CAN (11 bit ID, 250 kbaud) - used mainly on utility vehicles and Volvo\r\n   9\tISO 15765-4 CAN (29 bit ID, 250 kbaud) - used mainly on utility vehicles and Volvo\r\n\r\n\r\n    01 04 - ENGINE_LOAD\r\n    01 05 - ENGINE_COOLANT_TEMPERATURE\r\n    01 0C - ENGINE_RPM\r\n    01 0D - VEHICLE_SPEED\r\n    01 0F - INTAKE_AIR_TEMPERATURE\r\n    01 10 - MASS_AIR_FLOW\r\n    01 11 - THROTTLE_POSITION_PERCENTAGE\r\n    01 1F - ENGINE_RUN_TIME\r\n    01 2F - FUEL_LEVEL\r\n    01 46 - AMBIENT_AIR_TEMPERATURE\r\n    01 51 - FUEL_TYPE\r\n    01 5E - FUEL_CONSUMPTION_1\r\n    01 5F - FUEL_CONSUMPTION_2\r\n\r\n   */\r\n    //for collecting vehicle speed\r\n    ArrayList<Integer> km_speed = new ArrayList<Integer>();\r\n    String saveLocation = \"/storage/emulated/0/Download\";\r\n    int fileCount = 0;\r\n    String fileName = \"pid_data\" + fileCount + \".csv\";\r\n\r\n\r\n    String VIN = \"\";\r\n    String idleTime = \"\";\r\n    String engineOnTime = \"\";\r\n    String mileage = \"\";\r\n    ArrayList<Integer> fuelRate = new ArrayList<Integer>();\r\n    //String random VIN\r\n\r\n    public static final int MESSAGE_READ = 2;\r\n    public static final int MESSAGE_WRITE = 3;\r\n    public static final int MESSAGE_DEVICE_NAME = 4;\r\n    public static final int MESSAGE_TOAST = 5;\r\n    // Key names received from the BluetoothChatService Handler\r\n    public static final String DEVICE_NAME = \"device_name\";\r\n    public static final String TOAST = \"toast\";\r\n\r\n    protected final static char[] dtcLetters = {'P', 'C', 'B', 'U'};\r\n    protected final static char[] hexArray = \"0123456789ABCDEF\".toCharArray();\r\n\r\n    private static final String[] PIDS = {\r\n            \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\",\r\n            \"09\", \"0A\", \"0B\", \"0C\", \"0D\", \"0E\", \"0F\", \"10\",\r\n            \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\",\r\n            \"19\", \"1A\", \"1B\", \"1C\", \"1D\", \"1E\", \"1F\", \"20\"};\r\n\r\n    // Intent request codes\r\n    private static final int REQUEST_CONNECT_DEVICE = 2;\r\n    private static final int REQUEST_ENABLE_BT = 3;\r\n    private static final float APPBAR_ELEVATION = 14f;\r\n    private static boolean actionbar = true;\r\n    final List<String> commandslist = new ArrayList<String>();\r\n\r\n    final List<Double> avgconsumption = new ArrayList<Double>();\r\n    final List<String> troubleCodesArray = new ArrayList<String>();\r\n    MenuItem itemtemp;\r\n\r\n    BluetoothDevice currentdevice;\r\n    boolean commandmode = false, initialized = false, m_getPids = false, tryconnect = false, defaultStart = false;\r\n    String devicename = null, deviceprotocol = null;\r\n\r\n    String[] initializeCommands;\r\n    Intent serverIntent = null;\r\n    TroubleCodes troubleCodes;\r\n    String VOLTAGE = \"ATRV\",\r\n            PROTOCOL = \"ATDP\",\r\n            RESET = \"ATZ\",\r\n            PIDS_SUPPORTED20 = \"0100\",\r\n            ENGINE_COOLANT_TEMP = \"0105\",  //A-40\r\n            ENGINE_RPM = \"010C\",  //((A*256)+B)/4\r\n            ENGINE_LOAD = \"0104\",  // A*100/255\r\n            VEHICLE_SPEED = \"010D\",  //A\r\n            INTAKE_AIR_TEMP = \"010F\",  //A-40\r\n            MAF_AIR_FLOW = \"0110\", //MAF air flow rate 0 - 655.35\tgrams/sec ((256*A)+B) / 100  [g/s]\r\n            ENGINE_OIL_TEMP = \"015C\",  //A-40\r\n            FUEL_RAIL_PRESSURE = \"0122\", // ((A*256)+B)*0.079\r\n            INTAKE_MAN_PRESSURE = \"010B\", //Intake manifold absolute pressure 0 - 255 kPa\r\n            CONT_MODULE_VOLT = \"0142\",  //((A*256)+B)/1000\r\n            AMBIENT_AIR_TEMP = \"0146\",  //A-40\r\n            CATALYST_TEMP_B1S1 = \"013C\",  //(((A*256)+B)/10)-40\r\n            STATUS_DTC = \"0101\", //Status since DTC Cleared\r\n            THROTTLE_POSITION = \"0111\", //Throttle position 0 -100 % A*100/255\r\n            OBD_STANDARDS = \"011C\", //OBD standards this vehicle\r\n            FUEL_LEVEL = \"012F\", //Fuel level???\r\n            PIDS_SUPPORTED = \"0120\", //PIDs supported\r\n            GET_VIN = \"0902\"; // PID for getting vin\r\n\r\n    Toolbar toolbar;\r\n    AppBarLayout appbar;\r\n    String trysend = null;\r\n    private PowerManager.WakeLock wl;\r\n    private Menu menu;\r\n    private EditText mOutEditText;\r\n    private Button mSendButton, mRetrieveDB, mTroublecodes, mSendtoDB, mSavetoCSV;\r\n    private ListView mConversationView;\r\n    private TextView engineLoad, Fuel, voltage, coolantTemperature, Status, Loadtext, Volttext, Temptext, Centertext, Info, Airtemp_text, airTemperature, Maf_text, Maf, engineSpeedtext, engineSpeed, vehicleSpeedtext, vehicleSpeed;\r\n    private TextView intakeAirtemptext, intakeAirtemp, mafAirFlowtext, mafAirFlow, throttlePositiontext, throttlePosition, runTimeEngStarttext, runTimeEngStart, fuelRailPressuretext, fuelRailPressure, distTraveledtext, distTraveled, ambientAirTemptext, ambientAirTemp, ethFueltext, ethFuel, engOilTemptext, engOilTemp, engFuelRatetext, enfFuelRate;\r\n    private String mConnectedDeviceName = \"Ecu\";\r\n    private int rpmval = 0, intakeairtemp = 0, ambientairtemp = 0, coolantTemp = 0, mMaf = 0,\r\n            engineoiltemp = 0, b1s1temp = 0, Enginetype = 0, FaceColor = 0,\r\n            whichCommand = 0, m_dedectPids = 0, connectcount = 0, trycount = 0;\r\n    private int mEnginedisplacement = 1500;\r\n    // Local Bluetooth adapter\r\n    private BluetoothAdapter mBluetoothAdapter = null;\r\n    // Member object for the chat services\r\n    private BluetoothService mBtService = null;\r\n    private ObdWifiManager mWifiService = null;\r\n\r\n    StringBuilder inStream = new StringBuilder();\r\n\r\n    // The Handler that gets information back from the BluetoothChatService\r\n    // Array adapter for the conversation thread\r\n    private ArrayAdapter<String> mConversationArrayAdapter;\r\n\r\n    private final Handler mWifiHandler = new Handler() {\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n\r\n            switch (msg.what) {\r\n                case MESSAGE_STATE_CHANGE:\r\n\r\n                    switch (msg.arg1) {\r\n                        case ObdWifiManager.STATE_CONNECTED:\r\n                            Status.setText(getString(R.string.title_connected_to, \"ELM327 WIFI\"));\r\n                            try {\r\n                                //changing menu text items\r\n                                itemtemp = menu.findItem(R.id.menu_connect_wifi);\r\n                                itemtemp.setTitle(R.string.disconnectwifi);\r\n                            } catch (Exception e) {\r\n                            }\r\n                            tryconnect = false;\r\n                            //resetValues();\r\n                            sendEcuMessage(RESET);\r\n                            break;\r\n                        case ObdWifiManager.STATE_CONNECTING:\r\n                            Status.setText(R.string.title_connecting);\r\n                            Info.setText(R.string.tryconnectwifi);\r\n                            break;\r\n                        case ObdWifiManager.STATE_NONE:\r\n                            Status.setText(R.string.title_not_connected);\r\n                            itemtemp = menu.findItem(R.id.menu_connect_wifi);\r\n                            itemtemp.setTitle(R.string.connectwifi);\r\n                            if (mWifiService != null) mWifiService.disconnect();\r\n                            mWifiService = null;\r\n                            //resetValues();\r\n                            break;\r\n                    }\r\n                    break;\r\n                case MESSAGE_WRITE:\r\n\r\n                    byte[] writeBuf = (byte[]) msg.obj;\r\n                    String writeMessage = new String(writeBuf);\r\n\r\n                    if (commandmode || !initialized) {\r\n                        mConversationArrayAdapter.add(\"Command:  \" + writeMessage);\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MESSAGE_READ:\r\n\r\n                    String tmpmsg = clearMsg(msg);\r\n                    //This is kinda important, should need an if statement to not report everything as vin\r\n                    //MAybe do a \"if first two chars in the string are 09, send to new function meant to parse the vin/other vehicle info if we decide in future?\r\n                    mConversationArrayAdapter.add(\"VIN ???: \" + msg.obj.toString());\r\n\r\n                    Info.setText(tmpmsg);\r\n\r\n                    if (tmpmsg.contains(RSP_ID.NODATA.response) || tmpmsg.contains(RSP_ID.ERROR.response)) {\r\n\r\n                        try {\r\n                            String command = tmpmsg.substring(0, 4);\r\n\r\n                            if (isHexadecimal(command)) {\r\n                                removePID(command);\r\n                            }\r\n\r\n                        } catch (Exception e) {\r\n                            Toast.makeText(getApplicationContext(), e.getMessage(),\r\n                                    Toast.LENGTH_LONG).show();\r\n                        }\r\n                    }\r\n\r\n                    if (commandmode || !initialized){\r\n                        mConversationArrayAdapter.add(mConnectedDeviceName + \":  \" + tmpmsg);\r\n                    }\r\n                    //after intializations stop being read, we analyze the messages in OBD\r\n                    analyzeMsg(msg);\r\n                    break;\r\n\r\n                case MESSAGE_DEVICE_NAME:\r\n                    mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);\r\n                    break;\r\n\r\n                case MESSAGE_TOAST:\r\n                    Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),\r\n                            Toast.LENGTH_SHORT).show();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    private final Handler mBtHandler = new Handler() {\r\n        @Override\r\n        public void handleMessage(Message msg) {\r\n\r\n            switch (msg.what) {\r\n                case MESSAGE_STATE_CHANGE:\r\n\r\n                    switch (msg.arg1) {\r\n                        case BluetoothService.STATE_CONNECTED:\r\n\r\n                            Status.setText(getString(R.string.title_connected_to, mConnectedDeviceName));\r\n                            Info.setText(R.string.title_connected);\r\n                            try {\r\n                                itemtemp = menu.findItem(R.id.menu_connect_bt);\r\n                                itemtemp.setTitle(R.string.disconnectbt);\r\n                                Info.setText(R.string.title_connected);\r\n                            } catch (Exception e) {\r\n                            }\r\n\r\n                            tryconnect = false;\r\n                            //resetValues();\r\n                            sendEcuMessage(RESET);\r\n\r\n                            break;\r\n                        case BluetoothService.STATE_CONNECTING:\r\n                            Status.setText(R.string.title_connecting);\r\n                            Info.setText(R.string.tryconnectbt);\r\n                            break;\r\n                        case BluetoothService.STATE_LISTEN:\r\n\r\n                        case BluetoothService.STATE_NONE:\r\n\r\n                            Status.setText(R.string.title_not_connected);\r\n                            itemtemp = menu.findItem(R.id.menu_connect_bt);\r\n                            itemtemp.setTitle(R.string.connectbt);\r\n                            if (tryconnect) {\r\n                                mBtService.connect(currentdevice);\r\n                                connectcount++;\r\n                                if (connectcount >= 2) {\r\n                                    tryconnect = false;\r\n                                }\r\n                            }\r\n                            //resetValues();\r\n\r\n                            break;\r\n                    }\r\n                    break;\r\n                case MESSAGE_WRITE:\r\n\r\n                    byte[] writeBuf = (byte[]) msg.obj;\r\n                    String writeMessage = new String(writeBuf);\r\n\r\n                    if (commandmode || !initialized) {\r\n                        mConversationArrayAdapter.add(\"Command:  \" + writeMessage);\r\n                    }\r\n\r\n                    break;\r\n                case MESSAGE_READ:\r\n\r\n                    String tmpmsg = clearMsg(msg);\r\n                    Info.setText(tmpmsg);\r\n\r\n                    if (commandmode || !initialized) {\r\n                        mConversationArrayAdapter.add(mConnectedDeviceName + \":  \" + tmpmsg);\r\n                    }\r\n\r\n                    analyzeMsg(msg);\r\n                    break;\r\n                case MESSAGE_DEVICE_NAME:\r\n                    // save the connected device's name\r\n                    mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);\r\n                    break;\r\n                case MESSAGE_TOAST:\r\n                    Toast.makeText(getApplicationContext(), msg.getData().getString(TOAST),\r\n                            Toast.LENGTH_SHORT).show();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    //function to remove pids if they are not offered by the vehicle\r\n    private void removePID(String pid) {\r\n        int index = commandslist.indexOf(pid);\r\n\r\n        if (index != -1) {\r\n            commandslist.remove(index);\r\n            Info.setText(\"Removed pid: \" + pid);\r\n        }\r\n    }\r\n\r\n    // The action listener for the EditText widget, to listen for the return key\r\n    private TextView.OnEditorActionListener mWriteListener =\r\n            new TextView.OnEditorActionListener() {\r\n                public boolean onEditorAction(TextView view, int actionId, KeyEvent event) {\r\n                    // If the action is a key-up event on the return key, send the message\r\n                    if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_UP) {\r\n                        String message = view.getText().toString();\r\n                        sendEcuMessage(message);\r\n                    }\r\n                    return true;\r\n                }\r\n            };\r\n\r\n    public static boolean isHexadecimal(String text) {\r\n        text = text.trim();\r\n\r\n        char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n                'a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F'};\r\n\r\n        int hexDigitsCount = 0;\r\n\r\n        for (char symbol : text.toCharArray()) {\r\n            for (char hexDigit : hexDigits) {\r\n                if (symbol == hexDigit) {\r\n                    hexDigitsCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true ? hexDigitsCount == text.length() : false;\r\n    }\r\n\r\n    @SuppressLint(\"InvalidWakeLockTag\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_gauges);\r\n\r\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\r\n\r\n        if (toolbar != null) {\r\n            setSupportActionBar(toolbar);\r\n        }\r\n        appbar = (AppBarLayout) findViewById(R.id.appbar);\r\n\r\n        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n        StrictMode.setThreadPolicy(policy);\r\n\r\n        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\r\n        wl = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, \"My Tag\");\r\n        wl.acquire(10 * 60 * 1000L /*10 minutes*/);\r\n\r\n        getWindow().setSoftInputMode(\r\n                WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN\r\n        );\r\n\r\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\n                WindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n\r\n        Status = (TextView) findViewById(R.id.Status);\r\n        engineLoad = (TextView) findViewById(R.id.Load);\r\n        Fuel = (TextView) findViewById(R.id.Fuel);\r\n        coolantTemperature = (TextView) findViewById(R.id.Temp);\r\n        voltage = (TextView) findViewById(R.id.Volt);\r\n        Loadtext = (TextView) findViewById(R.id.Load_text);\r\n        Temptext = (TextView) findViewById(R.id.Temp_text);\r\n        Volttext = (TextView) findViewById(R.id.Volt_text);\r\n        Centertext = (TextView) findViewById(R.id.Center_text);\r\n        Info = (TextView) findViewById(R.id.info);\r\n        Airtemp_text = (TextView) findViewById(R.id.Airtemp_text);\r\n        airTemperature = (TextView) findViewById(R.id.Airtemp);\r\n        Maf_text = (TextView) findViewById(R.id.Maf_text);\r\n        Maf = (TextView) findViewById(R.id.Maf);\r\n        //new code (for dashboard)\r\n        engineSpeedtext = (TextView) findViewById(R.id.Speed_text);\r\n        engineSpeed = (TextView) findViewById(R.id.Speed);\r\n        vehicleSpeedtext = (TextView) findViewById(R.id.VehicleSpeed_text);\r\n        vehicleSpeed = (TextView) findViewById(R.id.VehicleSpeed);\r\n\r\n        intakeAirtemptext = (TextView) findViewById(R.id.IntakeAirtemp_text);\r\n        intakeAirtemp = (TextView) findViewById(R.id.IntakeAirtemp);\r\n        mafAirFlowtext = (TextView) findViewById(R.id.MafAirFlow_text);\r\n        mafAirFlow = (TextView) findViewById(R.id.MafAirFlow);\r\n        throttlePositiontext = (TextView) findViewById(R.id.ThrottlePosition_text);\r\n        throttlePosition = (TextView) findViewById(R.id.ThrottlePosition);\r\n        runTimeEngStarttext = (TextView) findViewById(R.id.RunTimeEngStart_text);\r\n        runTimeEngStart = (TextView) findViewById(R.id.RunTimeEngStart);\r\n        fuelRailPressuretext = (TextView) findViewById(R.id.FuelRailPressure_text);\r\n        fuelRailPressure = (TextView) findViewById(R.id.FuelRailPressure);\r\n        distTraveledtext = (TextView) findViewById(R.id.DistanceTraveled_text);\r\n        distTraveled = (TextView) findViewById(R.id.FuelRailPressure);\r\n\r\n\r\n        mOutEditText = (EditText) findViewById(R.id.edit_text_out);\r\n        mRetrieveDB = (Button) findViewById(R.id.button_retrievedb);\r\n        mSendButton = (Button) findViewById(R.id.button_send);\r\n        mSendtoDB = (Button) findViewById(R.id.button_sendDB);\r\n        mSavetoCSV = (Button) findViewById(R.id.button_saveCSV);\r\n        mTroublecodes = (Button) findViewById(R.id.button_troublecodes);\r\n        mConversationView = (ListView) findViewById(R.id.in);\r\n\r\n\r\n        troubleCodes = new TroubleCodes();\r\n\r\n        visibleCMD();\r\n\r\n        //key for commands\r\n        //ATZ reset all\r\n        //ATDP Describe the current Protocol\r\n        //ATAT0-1-2 Adaptive Timing Off - daptive Timing Auto1 - daptive Timing Auto2\r\n        //ATE0-1 Echo Off - Echo On\r\n        //ATSP0 Set Protocol to Auto and save it\r\n        //ATMA Monitor All\r\n        //ATL1-0 Linefeeds On - Linefeeds Off\r\n        //ATH1-0 Headers On - Headers Off\r\n        //ATS1-0 printing of Spaces On - printing of Spaces Off\r\n        //ATAL Allow Long (>7 byte) messages\r\n        //ATRD Read the stored data\r\n        //ATSTFF Set time out to maximum\r\n        //ATSTHH Set timeout to 4ms\r\n\r\n        initializeCommands = new String[]{\"ATL0\", \"ATE1\", \"ATH1\", \"ATAT1\", \"ATSTFF\", \"ATI\", \"ATDP\", \"ATSP0\", \"0100\"};\r\n\r\n        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\r\n        if (mBluetoothAdapter == null) {\r\n            Toast.makeText(getApplicationContext(), \"Bluetooth is not available\", Toast.LENGTH_LONG).show();\r\n        } else {\r\n            if (mBtService != null) {\r\n                if (mBtService.getState() == BluetoothService.STATE_NONE) {\r\n                    mBtService.start();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Initialize the array adapter for the conversation thread\r\n        mConversationArrayAdapter = new ArrayAdapter<String>(this, R.layout.message) {\r\n            @Override\r\n            public View getView(int position, View convertView, ViewGroup parent) {\r\n                // Get the Item from ListView\r\n                View view = super.getView(position, convertView, parent);\r\n\r\n                // Initialize a TextView for ListView each Item\r\n                TextView tv = (TextView) view.findViewById(R.id.listText);\r\n\r\n                // Set the text color of TextView (ListView Item)\r\n                tv.setTextColor(Color.parseColor(\"#3ADF00\"));\r\n                tv.setTextSize(10);\r\n\r\n                // Generate ListView Item using TextView\r\n                return view;\r\n            }\r\n        };\r\n\r\n        mConversationView.setAdapter(mConversationArrayAdapter);\r\n\r\n        mRetrieveDB.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                mConversationArrayAdapter.add(\"User: Requesting current data from database...\");\r\n\r\n\r\n                DataHandler.request();\r\n\r\n                //String sPIDs = \"0100\";\r\n                //m_getPids = false;\r\n                //sendEcuMessage(sPIDs);\r\n                //mConversationArrayAdapter.add(\"User: !!Not Yet Implemented!!\");\r\n            }\r\n        });\r\n        // Initialize the send button with a listener that for click events\r\n\r\n        mSendButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                // Send a message using content of the edit text widget\r\n                String message = mOutEditText.getText().toString();\r\n                sendEcuMessage(message);\r\n            }\r\n        });\r\n\r\n        mSendtoDB.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                while (fileCount > 0){\r\n                    // Assume you have a File object named csvFile representing your CSV file\r\n                    File csvFile = new File(saveLocation, fileName);\r\n                    mConversationArrayAdapter.add(\"User: Grabbing csv file at \\\"\" + csvFile + \"\\\"...\");\r\n                    mConversationArrayAdapter.add(\"User: Sending csv file to database...\");\r\n\r\n                    // Execute the AsyncTask to send data to the server\r\n                    DataHandler.send(saveLocation + \"/\" + fileName);\r\n                    //Decrement file name\r\n                    fileCount = fileCount - 1;\r\n                    fileName = \"pid_data\" + fileCount + \".csv\";\r\n                }\r\n\r\n\r\n\r\n                //mConversationArrayAdapter.add(\"User: Success! Deleting local csv file\");\r\n            }\r\n        });\r\n\r\n        mSavetoCSV.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n                //IDK HOW TO DO FUNCTIONS/CLASSES IN JAVA BUT THE CSV CALL WOULD GO HERE\r\n                mConversationArrayAdapter.clear(); //OLD LINE OF CODE FOR CLEARING CMD LIST\r\n                mConversationArrayAdapter.add(\"User: Saving data to CSV file at \\\"\" + saveLocation + \"\\\"...\");\r\n\r\n                // Save the data to CSV file (new code to save to CSV file)\r\n                String avg_speed = calculateAvgList(km_speed);\r\n                //String Vin = \"Vinhere\";\r\n                String avg_fuelRate = calculateAvgList(fuelRate);\r\n                String date = \"X/X/XXXX\";\r\n                String time = \"1500\";\r\n\r\n                //For vin?\r\n                sendEcuMessage(\"0902\");\r\n                //For fuel level\r\n                sendEcuMessage(\"012F\");\r\n\r\n                Date currentTime = Calendar.getInstance().getTime();\r\n                //Date date = DAY_OF_MONTH;\r\n\r\n                //Generate random Trip# each time button is pressed, to be stored into CSV\r\n\r\n                /* If wanted, we could take manual input for something\r\n                String driverID = mOutEditText.getText().toString();\r\n                mConversationArrayAdapter.add(driverID);\r\n                 */\r\n\r\n                //append all the values in one large string to be sent to saveToCSV function\r\n                //Order of the values below (\"Vin, AvgSpeed, FuelRate, IdleTime, EngineOnTime, MPG, Date, Time\")\r\n                mileage = String.valueOf(Integer.parseInt(avg_speed)/(Integer.parseInt(engineOnTime)/3600));\r\n                String csvData = VIN + \", \" + avg_speed + \", \" + avg_fuelRate + \", \" + idleTime + \", \" + engineOnTime + \", \" + mileage + \", \" + date + \", \" + time;\r\n                //VIN, avg_speed, avg_fuelrate?, idletime(NEEDS WORK), engineOnTime, mileage, date(NEEDS WORK), time(NEEDS WORK)\r\n\r\n                //incrememnet file name\r\n                fileCount = fileCount + 1;\r\n                fileName = \"pid_data\" + fileCount + \".csv\";\r\n\r\n                //calling func to save data to csv file\r\n                DataHandler.saveToCSV(fileName, csvData);\r\n\r\n                km_speed.clear(); //clearing the array list \r\n\r\n                mConversationArrayAdapter.add(\"User: Success! File named \\\"\"+ fileName +\"\\\"\");\r\n            }\r\n        });\r\n\r\n        mTroublecodes.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n\r\n                String troubleCodes = \"03\";\r\n                sendEcuMessage(troubleCodes);\r\n            }\r\n        });\r\n\r\n        mOutEditText.setOnEditorActionListener(mWriteListener);\r\n\r\n        RelativeLayout rlayout = (RelativeLayout) findViewById(R.id.mainscreen);\r\n        rlayout.setOnClickListener(new View.OnClickListener() {\r\n\r\n            @Override\r\n            public void onClick(View v) {\r\n               //Actionbar click\r\n            }\r\n        });\r\n        \r\n        getPreferences();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n\r\n        this.menu = menu;\r\n\r\n        getMenuInflater().inflate(R.menu.menu_main, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        switch (item.getItemId()) {\r\n\r\n            case R.id.menu_connect_bt:\r\n\r\n                if (mWifiService != null) {\r\n                    if (mWifiService.isConnected()) {\r\n                        Toast.makeText(getApplicationContext(), \"First Disconnect WIFI Device.\", Toast.LENGTH_SHORT).show();\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (!mBluetoothAdapter.isEnabled()) {\r\n                    Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n                    //new code\r\n                    if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {\r\n                        // TODO: Consider calling\r\n                        //    ActivityCompat#requestPermissions\r\n                        // here to request the missing permissions, and then overriding\r\n                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                        //                                          int[] grantResults)\r\n                        // to handle the case where the user grants the permission. See the documentation\r\n                        // for ActivityCompat#requestPermissions for more details.\r\n                    }\r\n                    startActivityForResult(enableIntent, REQUEST_ENABLE_BT, null);\r\n\r\n                }\r\n\r\n                if (mBtService == null) setupChat();\r\n\r\n                if (item.getTitle().equals(\"Use Bluetooth OBDII\")) {\r\n                    // Launch the DeviceListActivity to see devices and do scan\r\n                    serverIntent = new Intent(this, DeviceListActivity.class);\r\n                    startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);\r\n                } else {\r\n                    if (mBtService != null)\r\n                    {\r\n                        mBtService.stop();\r\n                        item.setTitle(R.string.connectbt);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            case R.id.menu_connect_wifi:\r\n\r\n                if (item.getTitle().equals(\"Use WiFi OBDII\")) {\r\n\r\n                    if (mWifiService == null)\r\n                    {\r\n                        mWifiService = new ObdWifiManager(this, mWifiHandler);\r\n                    }\r\n\r\n                    if (mWifiService != null) {\r\n                        if (mWifiService.getState() == ObdWifiManager.STATE_NONE) {\r\n                            mWifiService.connect();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (mWifiService != null)\r\n                    {\r\n                        mWifiService.disconnect();\r\n                        item.setTitle(R.string.connectwifi);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n                //case to enter the pids screen\r\n            case R.id.menu_terminal:\r\n\r\n                if (item.getTitle().equals(\"View Stats\")) {\r\n                    commandmode = true;\r\n                    invisibleCMD();\r\n                    item.setTitle(R.string.terminal);\r\n                } else {\r\n                    visibleCMD();\r\n                    item.setTitle(R.string.pids);\r\n                    commandmode = false;\r\n                    sendEcuMessage(VOLTAGE); //may not need this\r\n                }\r\n                return true;\r\n\r\n            case R.id.menu_settings:\r\n\r\n                // Launch the DeviceListActivity to see devices and do scan\r\n                serverIntent = new Intent(this, Prefs.class);\r\n                startActivity(serverIntent);\r\n\r\n                return true;\r\n            case R.id.menu_exit:\r\n                exit();\r\n\r\n                return true;\r\n            //case R.id.menu_reset:\r\n            //    resetValues();\r\n            //    return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    //for bluetooth\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        switch (requestCode) {\r\n            case REQUEST_CONNECT_DEVICE:\r\n                // When DeviceListActivity returns with a device to connect\r\n                if (resultCode == MainActivity.RESULT_OK) {\r\n                    connectDevice(data);\r\n                }\r\n                break;\r\n\r\n            case REQUEST_ENABLE_BT:\r\n\r\n                if (mBtService == null) setupChat();\r\n\r\n                if (resultCode == MainActivity.RESULT_OK) {\r\n                    serverIntent = new Intent(this, DeviceListActivity.class);\r\n                    startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);\r\n                } else {\r\n                    Toast.makeText(getApplicationContext(), \"BT device not enabled\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    @Override\r\n    public void onConfigurationChanged(Configuration newConfig) {\r\n        super.onConfigurationChanged(newConfig);\r\n\r\n        setDefaultOrientation();\r\n    }\r\n\r\n    @Override\r\n    public synchronized void onResume() {\r\n        super.onResume();\r\n        getPreferences();\r\n    }\r\n\r\n    @Override\r\n    public synchronized void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n\r\n        if (mBtService != null) mBtService.stop();\r\n        if (mWifiService != null)mWifiService.disconnect();\r\n\r\n        wl.release();\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        getPreferences();\r\n        setDefaultOrientation();\r\n        resetValues();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n//when the back button is pressed\r\n    @Override\r\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\r\n        super.onKeyDown(keyCode, event);\r\n        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n\r\n            if (!commandmode) {\r\n                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\r\n                alertDialogBuilder.setMessage(\"Are you sure you want exit?\");\r\n                alertDialogBuilder.setPositiveButton(\"Ok\",\r\n                        new DialogInterface.OnClickListener() {\r\n\r\n                            @Override\r\n                            public void onClick(DialogInterface arg0, int arg1) {\r\n                                exit();\r\n                            }\r\n                        });\r\n\r\n                alertDialogBuilder.setNegativeButton(\"cancel\",\r\n                        new DialogInterface.OnClickListener() {\r\n\r\n                            @Override\r\n                            public void onClick(DialogInterface arg0, int arg1) {\r\n\r\n                            }\r\n                        });\r\n\r\n                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                alertDialog.show();\r\n            } else {\r\n                commandmode = false;\r\n                visibleCMD();\r\n                MenuItem item = menu.findItem(R.id.menu_terminal);\r\n                item.setTitle(R.string.terminal);\r\n                sendEcuMessage(VOLTAGE); //may not need this\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return super.onKeyDown(keyCode, event);\r\n    }\r\n\r\n    private void exit() {\r\n        if (mBtService != null) mBtService.stop();\r\n        wl.release();\r\n        android.os.Process.killProcess(android.os.Process.myPid());\r\n    }\r\n\r\n    private void getPreferences() {\r\n\r\n            SharedPreferences preferences = PreferenceManager\r\n                    .getDefaultSharedPreferences(getBaseContext());\r\n\r\n            FaceColor = Integer.parseInt(preferences.getString(\"FaceColor\", \"0\"));\r\n\r\n\r\n\r\n            mEnginedisplacement = Integer.parseInt(preferences.getString(\"Enginedisplacement\", \"1500\"));\r\n\r\n            m_dedectPids = Integer.parseInt(preferences.getString(\"DedectPids\", \"0\"));\r\n\r\n            if (m_dedectPids == 0) {\r\n\r\n                commandslist.clear();\r\n\r\n                int i = 0;\r\n\r\n                //VIN message\r\n                commandslist.add(i, GET_VIN);\r\n                i++;\r\n                commandslist.add(i, VOLTAGE);\r\n\r\n                if (preferences.getBoolean(\"checkboxENGINE_RPM\", true)) {\r\n                    commandslist.add(i, ENGINE_RPM);\r\n                    i++;\r\n                }\r\n\r\n                if (preferences.getBoolean(\"checkboxVEHICLE_SPEED\", true)) {\r\n                    commandslist.add(i, VEHICLE_SPEED);\r\n                    i++;\r\n                }\r\n\r\n                if (preferences.getBoolean(\"checkboxENGINE_LOAD\", true)) {\r\n                    commandslist.add(i, ENGINE_LOAD);\r\n                    i++;\r\n                }\r\n\r\n                if (preferences.getBoolean(\"checkboxENGINE_COOLANT_TEMP\", true)) {\r\n                    commandslist.add(i, ENGINE_COOLANT_TEMP);\r\n                    i++;\r\n                }\r\n\r\n                if (preferences.getBoolean(\"checkboxINTAKE_AIR_TEMP\", true)) {\r\n                    commandslist.add(i, INTAKE_AIR_TEMP);\r\n                    i++;\r\n                }\r\n\r\n                if (preferences.getBoolean(\"checkboxMAF_AIR_FLOW\", true)) {\r\n                    commandslist.add(i, MAF_AIR_FLOW);\r\n                }\r\n\r\n                whichCommand = 0;\r\n            }\r\n    }\r\n\r\n    private void setDefaultOrientation() {\r\n\r\n        try {\r\n            setTextSize();\r\n\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    private void setTextSize() {\r\n        int textSize = 14;\r\n        int newTextSize = 12;\r\n\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\r\n\r\n        Status.setTextSize(newTextSize);\r\n        Fuel.setTextSize(textSize + 2);\r\n        coolantTemperature.setTextSize(textSize);\r\n        engineLoad.setTextSize(textSize);\r\n        voltage.setTextSize(textSize);\r\n        Temptext.setTextSize(textSize);\r\n        Loadtext.setTextSize(textSize);\r\n        Volttext.setTextSize(textSize);\r\n        Airtemp_text.setTextSize(textSize);\r\n        airTemperature.setTextSize(textSize);\r\n        Maf_text.setTextSize(textSize);\r\n        Maf.setTextSize(textSize);\r\n        Info.setTextSize(newTextSize);\r\n        engineSpeedtext.setTextSize(newTextSize);\r\n        engineSpeed.setTextSize(newTextSize);\r\n        vehicleSpeedtext.setTextSize(newTextSize);\r\n        vehicleSpeed.setTextSize(newTextSize);\r\n\r\n        intakeAirtemptext.setTextSize(newTextSize);\r\n        intakeAirtemp.setTextSize(newTextSize);\r\n        mafAirFlowtext.setTextSize(newTextSize);\r\n        mafAirFlow.setTextSize(newTextSize);\r\n        throttlePositiontext.setTextSize(newTextSize);\r\n        throttlePosition.setTextSize(newTextSize);\r\n        runTimeEngStarttext.setTextSize(newTextSize);\r\n        runTimeEngStart.setTextSize(newTextSize);\r\n        fuelRailPressuretext.setTextSize(newTextSize);\r\n        fuelRailPressure.setTextSize(newTextSize);\r\n        distTraveledtext.setTextSize(newTextSize);\r\n        distTraveled.setTextSize(newTextSize);\r\n    }\r\n\r\n    public void invisibleCMD() {\r\n        mConversationView.setVisibility(View.INVISIBLE);\r\n        mOutEditText.setVisibility(View.INVISIBLE);\r\n        mSendButton.setVisibility(View.INVISIBLE);\r\n        mRetrieveDB.setVisibility(View.INVISIBLE);\r\n        mTroublecodes.setVisibility(View.INVISIBLE);\r\n        mSendtoDB.setVisibility(View.INVISIBLE);\r\n        mSavetoCSV.setVisibility(View.INVISIBLE);\r\n\r\n        engineLoad.setVisibility(View.VISIBLE);\r\n        Fuel.setVisibility(View.VISIBLE);\r\n        voltage.setVisibility(View.VISIBLE);\r\n        coolantTemperature.setVisibility(View.VISIBLE);\r\n        Loadtext.setVisibility(View.VISIBLE);\r\n        Volttext.setVisibility(View.VISIBLE);\r\n        Temptext.setVisibility(View.VISIBLE);\r\n        Centertext.setVisibility(View.VISIBLE);\r\n        Info.setVisibility(View.VISIBLE);\r\n        //pids\r\n        Airtemp_text.setVisibility(View.VISIBLE);\r\n        airTemperature.setVisibility(View.VISIBLE);\r\n        Maf_text.setVisibility(View.VISIBLE);\r\n        Maf.setVisibility(View.VISIBLE);\r\n        engineSpeedtext.setVisibility(View.VISIBLE);\r\n        engineSpeed.setVisibility(View.VISIBLE);\r\n        vehicleSpeedtext.setVisibility(View.VISIBLE);\r\n        vehicleSpeed.setVisibility(View.VISIBLE);\r\n\r\n        intakeAirtemptext.setVisibility(View.VISIBLE);\r\n        intakeAirtemp.setVisibility(View.VISIBLE);\r\n        mafAirFlowtext.setVisibility(View.VISIBLE);\r\n        mafAirFlow.setVisibility(View.VISIBLE);\r\n        throttlePositiontext.setVisibility(View.VISIBLE);\r\n        throttlePosition.setVisibility(View.VISIBLE);\r\n        runTimeEngStarttext.setVisibility(View.VISIBLE);\r\n        runTimeEngStart.setVisibility(View.VISIBLE);\r\n        fuelRailPressuretext.setVisibility(View.VISIBLE);\r\n        fuelRailPressure.setVisibility(View.VISIBLE);\r\n        distTraveledtext.setVisibility(View.VISIBLE);\r\n        distTraveled.setVisibility(View.VISIBLE);\r\n\r\n\r\n    }\r\n\r\n    public void visibleCMD() {\r\n        engineLoad.setVisibility(View.INVISIBLE);\r\n        Fuel.setVisibility(View.INVISIBLE);\r\n        voltage.setVisibility(View.INVISIBLE);\r\n        coolantTemperature.setVisibility(View.INVISIBLE);\r\n        Loadtext.setVisibility(View.INVISIBLE);\r\n        Volttext.setVisibility(View.INVISIBLE);\r\n        Temptext.setVisibility(View.INVISIBLE);\r\n        Centertext.setVisibility(View.INVISIBLE);\r\n        Info.setVisibility(View.INVISIBLE);\r\n        //pids\r\n        Airtemp_text.setVisibility(View.INVISIBLE);\r\n        airTemperature.setVisibility(View.INVISIBLE);\r\n        Maf_text.setVisibility(View.INVISIBLE);\r\n        Maf.setVisibility(View.INVISIBLE);\r\n        engineSpeedtext.setVisibility(View.INVISIBLE);\r\n        engineSpeed.setVisibility(View.INVISIBLE);\r\n        vehicleSpeedtext.setVisibility(View.INVISIBLE);\r\n        vehicleSpeed.setVisibility(View.INVISIBLE);\r\n\r\n        intakeAirtemptext.setVisibility(View.INVISIBLE);\r\n        intakeAirtemp.setVisibility(View.INVISIBLE);\r\n        mafAirFlowtext.setVisibility(View.INVISIBLE);\r\n        mafAirFlow.setVisibility(View.INVISIBLE);\r\n        throttlePositiontext.setVisibility(View.INVISIBLE);\r\n        throttlePosition.setVisibility(View.INVISIBLE);\r\n        runTimeEngStarttext.setVisibility(View.INVISIBLE);\r\n        runTimeEngStart.setVisibility(View.INVISIBLE);\r\n        fuelRailPressuretext.setVisibility(View.INVISIBLE);\r\n        fuelRailPressure.setVisibility(View.INVISIBLE);\r\n        distTraveledtext.setVisibility(View.INVISIBLE);\r\n        distTraveled.setVisibility(View.INVISIBLE);\r\n\r\n        mConversationView.setVisibility(View.VISIBLE);\r\n        mOutEditText.setVisibility(View.VISIBLE);\r\n        mSendButton.setVisibility(View.VISIBLE);\r\n        mRetrieveDB.setVisibility(View.VISIBLE);\r\n        mTroublecodes.setVisibility(View.VISIBLE);\r\n        mSendtoDB.setVisibility(View.VISIBLE);\r\n        mSavetoCSV.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n//class to send data to server (performs network operation in the background)\r\n//private static class SendDataToServerTask extends AsyncTask<File, Void, Void> {\r\n//    @Override\r\n//    protected Void doInBackground(File... params) {\r\n//        // params[0] contains the data you want to send\r\n//        File fileToSend = params[0];\r\n//\r\n//        try {\r\n//            // replace \"your_server_url\" with your actual server URL\r\n//            URL url = new URL(\"66.211.207.130:3306\");\r\n//            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\r\n//\r\n//            // set the connection properties\r\n//            urlConnection.setRequestMethod(\"POST\");\r\n//            urlConnection.setDoOutput(true);\r\n//\r\n//            // create a FileInputStream for the file\r\n//            FileInputStream fileInputStream = new FileInputStream(fileToSend);\r\n//\r\n//            // write the data to the output stream\r\n//            OutputStream os = urlConnection.getOutputStream();\r\n//            byte[] buffer = new byte[4096];\r\n//            int bytesRead;\r\n//\r\n//            // read data from the file and write it to the output stream\r\n//            while ((bytesRead = fileInputStream.read(buffer)) != -1) {\r\n//                os.write(buffer, 0, bytesRead);\r\n//            }\r\n//\r\n//            // close streams\r\n//            fileInputStream.close();\r\n//            os.close();\r\n//\r\n//            // get the response from the server (optional)\r\n//            int responseCode = urlConnection.getResponseCode();\r\n//            // you can handle the response code or server response here (did nothing with it)\r\n//            urlConnection.disconnect();\r\n//        } catch (Exception e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//        return null;\r\n//    }\r\n//}\r\n\r\n    public void insertData(File csvFile) {\r\n\r\n        class SendDataToServerTask extends AsyncTask<File, Void, String> {\r\n            @Override\r\n            protected String doInBackground(File... params) {\r\n\r\n                File csvFile = params[0];\r\n\r\n                try {\r\n                    //PHP script to handle CSV file\r\n                    URL url = new URL(\"http://example.com/insert_data.php\");\r\n                    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\r\n                    // set the connection properties\r\n                    urlConnection.setDoOutput(true);\r\n                    urlConnection.setRequestMethod(\"POST\");\r\n\r\n                    // Set Content-Type to multipart/form-data\r\n                    urlConnection.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + \"*****\");\r\n\r\n                    // Get the output stream of the connection\r\n                    OutputStream outputStream = urlConnection.getOutputStream();\r\n                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, \"UTF-8\"));\r\n\r\n                    // Attach CSV file\r\n                    FileInputStream fileInputStream = new FileInputStream(csvFile);\r\n                    byte[] buffer = new byte[4096];\r\n                    int bytesRead;\r\n\r\n                    while ((bytesRead = fileInputStream.read(buffer)) != -1) {\r\n                        outputStream.write(buffer, 0, bytesRead);\r\n                    }\r\n\r\n                    //close streams\r\n                    fileInputStream.close();\r\n                    outputStream.flush();\r\n                    outputStream.close();\r\n\r\n                    // get the response from the server (optional)\r\n                    int responseCode = urlConnection.getResponseCode();\r\n                    // Handle the response code or server response here (did nothing with it)\r\n                    urlConnection.disconnect();\r\n\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return \"Data Inserted Successfully\";\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(String result) {\r\n                super.onPostExecute(result);\r\n                Toast.makeText(MainActivity.this, \"Data Submit Successfully\", Toast.LENGTH_LONG).show();\r\n            }\r\n        }\r\n\r\n        SendDataToServerTask sendPostReqAsyncTask = new SendDataToServerTask();\r\n        sendPostReqAsyncTask.execute(csvFile);\r\n    }\r\n\r\n//resetting the text values of the pids\r\n    public void resetValues() {\r\n        engineLoad.setText(\"0 %\");\r\n        voltage.setText(\"0 V\");\r\n        coolantTemperature.setText(\"0 C°\");\r\n        Info.setText(\"\");\r\n        airTemperature.setText(\"0 C°\");\r\n        Maf.setText(\"0 g/s\");\r\n        Fuel.setText(\"0 - 0 l/h\");\r\n        engineSpeed.setText(\"0 rpm\");\r\n        vehicleSpeed.setText(\"0 km/h\");\r\n        intakeAirtemp.setText(\"0 C°\");\r\n        mafAirFlow.setText(\"0 g/s\");\r\n        throttlePosition.setText(\"0 %\");\r\n        runTimeEngStart.setText(\"0 s\");\r\n        fuelRailPressure.setText(\"0 kPa\");\r\n        distTraveled.setText(\"0 km\");\r\n\r\n        //cause the elm to reinitialize, and clear the array of text\r\n        m_getPids = false;\r\n        whichCommand = 0;\r\n        trycount = 0;\r\n        initialized = false;\r\n        defaultStart = false;\r\n        avgconsumption.clear();\r\n        mConversationArrayAdapter.clear();\r\n    }\r\n    //for connecting the bluetooth\r\n    private void connectDevice(Intent data) {\r\n        tryconnect = true;\r\n        // Get the device MAC address\r\n        String address = data.getExtras().getString(DeviceListActivity.EXTRA_DEVICE_ADDRESS);\r\n        // Get the BluetoothDevice object\r\n        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);\r\n        try {\r\n            // Attempt to connect to the device\r\n            mBtService.connect(device);\r\n            currentdevice = device;\r\n\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n\r\n    private void setupChat() {\r\n        // Initialize the BluetoothChatService to perform bluetooth connections\r\n        mBtService = new BluetoothService(this, mBtHandler);\r\n    }\r\n\r\n    private void sendEcuMessage(String message) {\r\n        if( mWifiService != null)\r\n        {\r\n            if(mWifiService.isConnected())\r\n            {\r\n                try {\r\n                    if (!message.isEmpty()) {\r\n                        message = message + \"\\r\";\r\n                        byte[] send = message.getBytes();\r\n                        mWifiService.write(send);\r\n                    }\r\n                } catch (Exception e) {\r\n                    Toast.makeText(this, e.toString(), Toast.LENGTH_LONG).show();\r\n                }\r\n            }\r\n        }\r\n        else if (mBtService != null)\r\n        {\r\n            // Check that we're actually connected before trying anything\r\n            if (mBtService.getState() != BluetoothService.STATE_CONNECTED) {\r\n                //Toast.makeText(this, R.string.not_connected, Toast.LENGTH_LONG).show();\r\n                return;\r\n            }\r\n            try {\r\n                if (!message.isEmpty()) {\r\n\r\n                    message = message + \"\\r\";\r\n                    // Get the message bytes and tell the BluetoothChatService to write\r\n                    byte[] send = message.getBytes();\r\n                    mBtService.write(send);\r\n                }\r\n            } catch (Exception e) {\r\n                Log.w(\"ECU\",\"Error getting message: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    private void sendInitCommands() {\r\n        if (initializeCommands.length != 0) {\r\n\r\n            if (whichCommand < 0) {\r\n                whichCommand = 0;\r\n            }\r\n\r\n            String send = initializeCommands[whichCommand];\r\n            sendEcuMessage(send);\r\n\r\n            if (whichCommand == initializeCommands.length - 1) {\r\n                initialized = true;\r\n                whichCommand = 0;\r\n                sendDefaultCommands();\r\n            } else {\r\n                whichCommand++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void sendDefaultCommands() {\r\n\r\n        if (!commandslist.isEmpty()) {\r\n            //Old condition -> commandslist.size() != 0\r\n\r\n            if (whichCommand < 0) {\r\n                whichCommand = 0;\r\n            }\r\n\r\n            String send = commandslist.get(whichCommand);\r\n            sendEcuMessage(send);\r\n\r\n            if (whichCommand >= commandslist.size() - 1) {\r\n                whichCommand = 0;\r\n            } else {\r\n                whichCommand++;\r\n            }\r\n        }\r\n    }\r\n\r\n    //removing certain substrings to clean up the message\r\n    private String clearMsg(Message msg) {\r\n        String tmpmsg = msg.obj.toString();\r\n\r\n        tmpmsg = tmpmsg.replace(\"null\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"\\\\s\", \"\"); //removes all [ \\t\\n\\x0B\\f\\r]\r\n        tmpmsg = tmpmsg.replaceAll(\">\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"SEARCHING...\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"ATZ\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"ATI\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"atz\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"ati\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"ATDP\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"atdp\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"ATRV\", \"\");\r\n        tmpmsg = tmpmsg.replaceAll(\"atrv\", \"\");\r\n\r\n        return tmpmsg;\r\n    }\r\n\r\n    private void checkPids(String tmpmsg) {\r\n        //check if 41 is present in the message, then set index to start from that number in the message and read to the length to check for the message\r\n        if (tmpmsg.contains(\"41\")) {\r\n            //Old condition -> tmpmsg.indexOf(\"41\") != -1\r\n            int index = tmpmsg.indexOf(\"41\");\r\n\r\n            String pidmsg = tmpmsg.substring(index, tmpmsg.length());\r\n\r\n            if (pidmsg.contains(\"4100\")) {\r\n                //printing the supported pids to the terminal\r\n                setPidsSupported(pidmsg);\r\n                return;\r\n            } else\r\n            {\r\n                //print the pid msg to terminal\r\n                //mConversationArrayAdapter.add(pidmsg);\r\n            }\r\n        }\r\n        else if (tmpmsg.contains(\"49\")) {\r\n            int index = tmpmsg.indexOf(\"49\");\r\n\r\n            String pidmsg = tmpmsg.substring(index, tmpmsg.length());\r\n            mConversationArrayAdapter.add(pidmsg);\r\n        }\r\n    }\r\n    //new code for decoding Vin\r\n    private String checkVinDecode(String msg){\r\n        //check is message contains 49\r\n        if(msg.contains(\"49\")){\r\n            int vinStartIndex = msg.indexOf(\"49\");\r\n            //check if VIN pattern exists in the hex string\r\n            if (vinStartIndex != -1) {\r\n                //moving start position after 49\r\n                vinStartIndex += 2;\r\n                // extract the VIN portion of the hex string\r\n                String vinHex = msg.substring(vinStartIndex);\r\n\r\n                //convert VIN hex string to bytes\r\n                byte[] bytes = new byte[vinHex.length() / 2];\r\n                for (int i = 0; i < vinHex.length(); i += 2) {\r\n                    bytes[i / 2] = (byte) ((Character.digit(vinHex.charAt(i), 16) << 4)\r\n                            + Character.digit(vinHex.charAt(i + 1), 16));\r\n                }\r\n\r\n                //decode bytes to ASCII characters\r\n                StringBuilder rawVinMsg = new StringBuilder();\r\n                for (byte b : bytes) {\r\n                    rawVinMsg.append((char) b);\r\n                }\r\n\r\n                //using reg expression to get valid characters (capital letters and numbers)\r\n                Pattern pattern = Pattern.compile(\"[A-Z0-9]+\");\r\n                Matcher matcher = pattern.matcher(rawVinMsg.toString());\r\n\r\n                StringBuilder vinMsg = new StringBuilder();\r\n                while (matcher.find()) {\r\n                    vinMsg.append(matcher.group());\r\n                }\r\n\r\n                mConversationArrayAdapter.add(\"VIN: \" + vinMsg.toString().trim());\r\n                Log.d(\"VinDecode\", \"VIN = \" + vinMsg.toString().trim());\r\n                return vinMsg.toString().trim();\r\n            }\r\n            else {\r\n                Log.d(\"VinDecode\", \"VIN Not found in hex string\");\r\n                return \"VIN not found in hex string.\";\r\n            }\r\n        }\r\n        mConversationArrayAdapter.add(\"VIN: Not Found!\");\r\n        Log.d(\"VinDecode\", \"VIN Not found!\");\r\n        return \"VIN not found.\";\r\n    }\r\n\r\n    //new code for calculating the averages of array lists and converting it to a string\r\n    public static String calculateAvgList(ArrayList<Integer> list) {\r\n        //if theres nothing in the list\r\n        if (list == null || list.isEmpty()) {\r\n            //return \"N/A\";\r\n            return \"0\";\r\n        }\r\n\r\n        int sum = 0;\r\n        for (int num : list) {\r\n            sum += num;\r\n        }\r\n\r\n        double answer = (double) sum / list.size();\r\n        String s = Double.toString(answer);\r\n        return s;\r\n    }\r\n\r\n    private void analyzeMsg(Message msg) {\r\n        //cleaning the message (for mode 1)\r\n        String tmpmsg = clearMsg(msg);\r\n        //printing the voltage to terminal\r\n        generateVolt(tmpmsg);\r\n        //getting the device name and the protocol (SAE or ISO)\r\n        getElmInfo(tmpmsg);\r\n        //if the elm is not initialized\r\n        if (!initialized) {\r\n            sendInitCommands();\r\n        } else {\r\n            //check if 41 is present in the message, then set index to start from that number in the message and read to the length to check for the message\r\n            checkPids(tmpmsg);\r\n            //add method to check for 49 (for decoding the VIN)\r\n            VIN = checkVinDecode(msg.obj.toString());\r\n\r\n            if (!m_getPids && m_dedectPids == 1) {\r\n                String sPIDs = \"0100\";\r\n                sendEcuMessage(sPIDs);\r\n                return;\r\n            }\r\n\r\n            if (commandmode) {\r\n                getFaultInfo(tmpmsg);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                analyzePIDS(tmpmsg);\r\n            } catch (Exception e) {\r\n                String errorMessage = \"Error : \" + e.getMessage();\r\n                Info.setText(errorMessage);\r\n            }\r\n\r\n            sendDefaultCommands();\r\n        }\r\n    }\r\n\r\n    private void getFaultInfo(String tmpmsg) {\r\n\r\n            String substr = \"43\";\r\n            //looking for starting position of 43 within tmpmsg string\r\n            int index = tmpmsg.indexOf(substr);\r\n\r\n            if (index == -1)\r\n            {\r\n                substr = \"47\";\r\n                index = tmpmsg.indexOf(substr);\r\n            }\r\n\r\n            if (index != -1) {\r\n\r\n                tmpmsg = tmpmsg.substring(index, tmpmsg.length());\r\n\r\n                if (tmpmsg.substring(0, 2).equals(substr)) {\r\n\r\n                    performCalculations(tmpmsg);\r\n\r\n                    String faultCode = null;\r\n                    String faultDesc = null;\r\n\r\n                    if (!troubleCodesArray.isEmpty()) {\r\n                        //Old condition -> troubleCodesArray.size() > 0\r\n\r\n                        for (int i = 0; i < troubleCodesArray.size(); i++) {\r\n                            faultCode = troubleCodesArray.get(i);\r\n                            faultDesc = troubleCodes.getFaultCode(faultCode);\r\n\r\n                            Log.e(TAG, \"Fault Code: \" + substr + \" : \" + faultCode + \" desc: \" + faultDesc);\r\n\r\n                            if (faultCode != null && faultDesc != null) {\r\n                                mConversationArrayAdapter.add(mConnectedDeviceName + \":  TroubleCode -> \" + faultCode + \"\\n\" + faultDesc);\r\n                            } else if (faultCode != null && faultDesc == null) {\r\n                                mConversationArrayAdapter.add(mConnectedDeviceName + \":  TroubleCode -> \" + faultCode +\r\n                                        \"\\n\" + \"Definition not found for code: \" + faultCode);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        faultCode = \"No error found...\";\r\n                        mConversationArrayAdapter.add(mConnectedDeviceName + \":  TroubleCode -> \" + faultCode);\r\n                    }\r\n                }\r\n            }\r\n    }\r\n//for performing the fault code\r\n    protected void performCalculations(String fault) {\r\n\r\n        final String result = fault;\r\n        String workingData = \"\";\r\n        int startIndex = 0;\r\n        troubleCodesArray.clear();\r\n\r\n        try{\r\n\r\n            if(result.contains(\"43\")) {\r\n                //result.indexOf(\"43\") != -1\r\n                workingData = result.replaceAll(\"^43|[\\r\\n]43|[\\r\\n]\", \"\");\r\n            }else if(result.contains(\"47\")) {\r\n                //result.indexOf(\"47\") != -1\r\n                workingData = result.replaceAll(\"^47|[\\r\\n]47|[\\r\\n]\", \"\");\r\n            }\r\n\r\n            for (int begin = startIndex; begin < workingData.length(); begin += 4) {\r\n                String dtc = \"\";\r\n                byte b1 = hexStringToByteArray(workingData.charAt(begin));\r\n                int ch1 = ((b1 & 0xC0) >> 6);\r\n                int ch2 = ((b1 & 0x30) >> 4);\r\n                dtc += dtcLetters[ch1];\r\n                dtc += hexArray[ch2];\r\n                dtc += workingData.substring(begin + 1, begin + 4);\r\n\r\n                if (dtc.equals(\"P0000\")) {\r\n                    continue;\r\n                }\r\n\r\n                troubleCodesArray.add(dtc);\r\n            }\r\n        }catch(Exception e)\r\n        {\r\n            Log.e(TAG, \"Error: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private byte hexStringToByteArray(char s) {\r\n        return (byte) ((Character.digit(s, 16) << 4));\r\n    }\r\n\r\n    //getting the device name and the protocol\r\n    private void getElmInfo(String tmpmsg) {\r\n\r\n        if (tmpmsg.contains(\"ELM\") || tmpmsg.contains(\"elm\")) {\r\n            devicename = tmpmsg;\r\n        }\r\n\r\n        if (tmpmsg.contains(\"SAE\") || tmpmsg.contains(\"ISO\")\r\n                || tmpmsg.contains(\"sae\") || tmpmsg.contains(\"iso\") || tmpmsg.contains(\"AUTO\")) {\r\n            deviceprotocol = tmpmsg;\r\n        }\r\n\r\n        if (deviceprotocol != null && devicename != null) {\r\n            devicename = devicename.replaceAll(\"STOPPED\", \"\");\r\n            deviceprotocol = deviceprotocol.replaceAll(\"STOPPED\", \"\");\r\n            String statusMessage = devicename + \" \" + deviceprotocol;\r\n            Status.setText(statusMessage);\r\n        }\r\n    }\r\n\r\n//printing the supported pids to the terminal\r\n    private void setPidsSupported(String buffer) {\r\n\r\n        String infoMessage = \"Trying to get available pids : \" + String.valueOf(trycount);\r\n        Info.setText(infoMessage);\r\n        trycount++;\r\n\r\n        StringBuilder flags = new StringBuilder();\r\n        String buf = buffer;//.toString();\r\n        buf = buf.trim();\r\n        buf = buf.replace(\"\\t\", \"\");\r\n        buf = buf.replace(\" \", \"\");\r\n        buf = buf.replace(\">\", \"\");\r\n\r\n        if (buf.indexOf(\"4100\") == 0 || buf.indexOf(\"4120\") == 0) {\r\n\r\n            for (int i = 0; i < 8; i++) {\r\n                String tmp = buf.substring(i + 4, i + 5);\r\n                int data = Integer.valueOf(tmp, 16).intValue();\r\n//                String retStr = Integer.toBinaryString(data);\r\n                if ((data & 0x08) == 0x08) {\r\n                    flags.append(\"1\");\r\n                } else {\r\n                    flags.append(\"0\");\r\n                }\r\n\r\n                if ((data & 0x04) == 0x04) {\r\n                    flags.append(\"1\");\r\n                } else {\r\n                    flags.append(\"0\");\r\n                }\r\n\r\n                if ((data & 0x02) == 0x02) {\r\n                    flags.append(\"1\");\r\n                } else {\r\n                    flags.append(\"0\");\r\n                }\r\n\r\n                if ((data & 0x01) == 0x01) {\r\n                    flags.append(\"1\");\r\n                } else {\r\n                    flags.append(\"0\");\r\n                }\r\n            }\r\n\r\n            commandslist.clear();\r\n            commandslist.add(0, VOLTAGE);\r\n            int pid = 1;\r\n\r\n            StringBuilder supportedPID = new StringBuilder();\r\n            supportedPID.append(\"Supported PIDS:\\n\");\r\n            for (int j = 0; j < flags.length(); j++) {\r\n                if (flags.charAt(j) == '1') {\r\n                    supportedPID.append(\" \" + PIDS[j] + \" \");\r\n                    if (!PIDS[j].contains(\"11\") && !PIDS[j].contains(\"01\") && !PIDS[j].contains(\"20\")) {\r\n                        commandslist.add(pid, \"01\" + PIDS[j]);\r\n                        pid++;\r\n                    }\r\n                }\r\n            }\r\n            m_getPids = true;\r\n            mConversationArrayAdapter.add(mConnectedDeviceName + \": \" + supportedPID.toString());\r\n            whichCommand = 0;\r\n            sendEcuMessage(\"ATRV\"); //may not need this\r\n\r\n        } else {\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    private double calculateAverage(List<Double> listAvg) {\r\n        Double sum = 0.0;\r\n        for (Double val : listAvg) {\r\n            sum += val;\r\n        }\r\n        return sum.doubleValue() / listAvg.size();\r\n    }\r\n\r\n\r\n    private void analyzePIDS(String dataRecieved) {\r\n\r\n        int A = 0;\r\n        int B = 0;\r\n        int PID = 0;\r\n\r\n        if ((dataRecieved != null) && (dataRecieved.matches(\"^[0-9A-F]+$\"))) {\r\n            //removes spaces\r\n            dataRecieved = dataRecieved.trim();\r\n\r\n            int index = dataRecieved.indexOf(\"41\");\r\n            int index09 = dataRecieved.indexOf(\"49\");\r\n\r\n            String tmpmsg = null;\r\n            //calculating values for mode 01\r\n            if (index != -1) {\r\n\r\n                tmpmsg = dataRecieved.substring(index, dataRecieved.length());\r\n\r\n                if (tmpmsg.substring(0, 2).equals(\"41\")) {\r\n\r\n                    PID = Integer.parseInt(tmpmsg.substring(2, 4), 16);\r\n                    A = Integer.parseInt(tmpmsg.substring(4, 6), 16);\r\n                    B = Integer.parseInt(tmpmsg.substring(6, 8), 16);\r\n\r\n                    calculateEcuValues(PID, A, B);\r\n\r\n                    //print the pid msg to terminal\r\n                    mConversationArrayAdapter.add(tmpmsg);\r\n\r\n                }\r\n            }\r\n            else if (index09 != -1) {\r\n\r\n                tmpmsg = dataRecieved.substring(index09, dataRecieved.length());\r\n\r\n                if (tmpmsg.substring(0, 2).equals(\"49\")) {\r\n\r\n                    PID = Integer.parseInt(tmpmsg.substring(2, 4), 16);\r\n                    A = Integer.parseInt(tmpmsg.substring(4, 6), 16);\r\n                    B = Integer.parseInt(tmpmsg.substring(6, 8), 16);\r\n\r\n                    calculateEcuValues(PID, A, B);\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n//printing the voltage to terminal\r\n    private void generateVolt(String msg) {\r\n\r\n        String VoltText = null;\r\n\r\n        if ((msg != null) && (msg.matches(\"\\\\s*[0-9]{1,2}([.][0-9]{1,2})\\\\s*\"))) {\r\n\r\n            VoltText = msg + \"V\";\r\n\r\n            mConversationArrayAdapter.add(mConnectedDeviceName + \": \" + msg + \"V\");\r\n\r\n        } else if ((msg != null) && (msg.matches(\"\\\\s*[0-9]{1,2}([.][0-9]{1,2})?V\\\\s*\"))) {\r\n\r\n            VoltText = msg;\r\n\r\n            mConversationArrayAdapter.add(mConnectedDeviceName + \": \" + msg);\r\n        }\r\n        //updating text\r\n        if (VoltText != null) {\r\n            voltage.setText(VoltText);\r\n        }\r\n    }\r\n    //calculating the pids\r\n    private void calculateEcuValues(int PID, int A, int B) {\r\n\r\n        double val = 0;\r\n        int intval = 0;\r\n        int tempC = 0;\r\n\r\n        switch (PID) {\r\n\r\n            case 4://PID(04): Engine Load\r\n                // A*100/255\r\n                val = A * 100 / 255;\r\n                int calcLoad = (int) val;\r\n                //for setting text to int value\r\n                engineLoad.setText(Integer.toString(calcLoad) + \" %\");\r\n                //adding string to terminal\r\n                mConversationArrayAdapter.add(\"Engine Load: \" + Integer.toString(calcLoad) + \" %\");\r\n\r\n                double FuelFlowLH = (mMaf * calcLoad * mEnginedisplacement / 1000.0 / 714.0) + 0.8;\r\n\r\n                if(calcLoad == 0)\r\n                    FuelFlowLH = 0;\r\n\r\n                avgconsumption.add(FuelFlowLH);\r\n\r\n                String fuelMessage = String.format(\"%10.1f\", calculateAverage(avgconsumption)).trim() + \" l/h\";\r\n                Fuel.setText(fuelMessage);\r\n                mConversationArrayAdapter.add(\"Fuel Consumption: \" + String.format(\"%10.1f\", calculateAverage(avgconsumption)).trim() + \" l/h\");\r\n                break;\r\n\r\n            case 5://PID(05): Coolant Temperature\r\n                //A-40\r\n                tempC = A - 40;\r\n                coolantTemp = tempC;\r\n                String coolantMessage = Integer.toString(coolantTemp) + \" C°\";\r\n                coolantTemperature.setText(coolantMessage);\r\n                mConversationArrayAdapter.add(\"Enginetemp: \" + Integer.toString(tempC) + \" C°\");\r\n\r\n                break;\r\n\r\n            case 11://PID(0B)\r\n                //A\r\n                mConversationArrayAdapter.add(\"Intake Man Pressure: \" + Integer.toString(A) + \" kPa\");\r\n                break;\r\n\r\n            case 12: //PID(0C): RPM\r\n                //((A*256)+B)/4\r\n                val = ((A * 256) + B) / 4;\r\n                intval = (int) val;\r\n                rpmval = intval;\r\n                String engineSpeedMessage = Integer.toString(intval) + \" rpm\";\r\n                engineSpeed.setText(engineSpeedMessage);\r\n                //new code to add to array\r\n                mConversationArrayAdapter.add(\"Engine Speed: \" + Integer.toString(rpmval) + \" rpm\");\r\n                break;\r\n\r\n\r\n            case 13://PID(0D): KM\r\n                // A\r\n                //new code to add to array\r\n                String vehicleSpeedMessage = Integer.toString(A) + \" km/h\";\r\n                vehicleSpeed.setText(vehicleSpeedMessage);\r\n                mConversationArrayAdapter.add(\"Vehicle Speed: \" + Integer.toString(A) + \" km/h\");\r\n                //new code to add to an array list for the averages to be sent to DB\r\n                km_speed.add(A);\r\n                break;\r\n\r\n            case 15://PID(0F): Intake Temperature\r\n                // A - 40\r\n                tempC = A - 40;\r\n                intakeairtemp = tempC;\r\n                String airMessage = Integer.toString(intakeairtemp) + \" C°\";\r\n                airTemperature.setText(airMessage);\r\n                mConversationArrayAdapter.add(\"Intakeairtemp: \" + Integer.toString(intakeairtemp) + \" C°\");\r\n                break;\r\n\r\n            case 16://PID(10): Maf\r\n                // ((256*A)+B) / 100  [g/s]\r\n                val = ((256 * A) + B) / 100;\r\n                mMaf = (int) val;\r\n                String mafMessage = Integer.toString(intval) + \" g/s\";\r\n                mafAirFlow.setText(mafMessage);\r\n                mConversationArrayAdapter.add(\"Maf Air Flow: \" + Integer.toString(mMaf) + \" g/s\");\r\n                break;\r\n\r\n            case 17://PID(11): throttle position\r\n                //A*100/255\r\n                val = A * 100 / 255;\r\n                intval = (int) val;\r\n                String posMsg = Integer.toString(intval) + \" %\";\r\n                throttlePosition.setText(posMsg);\r\n                mConversationArrayAdapter.add(\" Throttle position: \" + Integer.toString(intval) + \" %\");\r\n                break;\r\n\r\n            case 31: //PID(1F): run time\r\n                //256*A+B\r\n                val = (256 * A) + B;\r\n                intval = (int) val;\r\n                String runTimeMsg = Integer.toString(intval) + \" s\";\r\n                engineOnTime = Integer.toString(intval);\r\n                runTimeEngStart.setText(runTimeMsg);\r\n                mConversationArrayAdapter.add(\"Run time since engine start: \" + Integer.toString(intval) + \" seconds\");\r\n                break;\r\n\r\n            case 35://PID(23)\r\n                // ((A*256)+B)*0.079\r\n                val = ((A * 256) + B) * 0.079;\r\n                intval = (int) val;\r\n                String fuelRailMsg = Integer.toString(intval) + \" kPa\";\r\n                //this line below should be different?\r\n                runTimeEngStart.setText(fuelRailMsg);\r\n                mConversationArrayAdapter.add(\"Fuel Rail Pressure: \" + Integer.toString(intval) + \" kPa\");\r\n                break;\r\n\r\n            case 49://PID(31)\r\n                //(256*A)+B km\r\n                val = (A * 256) + B;\r\n                intval = (int) val;\r\n                String distTravelMsg = Integer.toString(intval) + \" km\";\r\n                //this line below sohuld be different?\r\n                runTimeEngStart.setText(distTravelMsg);\r\n                mConversationArrayAdapter.add(\"Distance traveled: \" + Integer.toString(intval) + \" km\");\r\n                break;\r\n\r\n            case 70://PID(46)\r\n                // A-40 [DegC]\r\n                tempC = A - 40;\r\n                ambientairtemp = tempC;\r\n                mConversationArrayAdapter.add(\"Ambientairtemp: \" + Integer.toString(ambientairtemp) + \" C°\");\r\n                break;\r\n\r\n            case 82://PID(52)\r\n                //100/255 * A\r\n                val = (100/255) * A;\r\n                intval = (int) val;\r\n                mConversationArrayAdapter.add(\"Ethanol fuel %: \" + Integer.toString(intval) + \" %\");\r\n\r\n            case 92://PID(5C)\r\n                //A-40\r\n                tempC = A - 40;\r\n                engineoiltemp = tempC;\r\n                mConversationArrayAdapter.add(\"Engine oil temperature: \" + Integer.toString(engineoiltemp) + \" C°\");\r\n                break;\r\n\r\n            case 94://PID(5E)\r\n                //(256*A+B) / 20\r\n                val = ((256 * A) + B) / 20;\r\n                intval = (int) val;\r\n                fuelRate.add(intval);\r\n                mConversationArrayAdapter.add(\"Engine fuel rate: \" + Integer.toString(intval) + \" L/h\");\r\n\r\n            default:\r\n        }\r\n    }\r\n\r\n    enum RSP_ID {\r\n        PROMPT(\">\"),\r\n        OK(\"OK\"),\r\n        MODEL(\"ELM\"),\r\n        NODATA(\"NODATA\"),\r\n        SEARCH(\"SEARCHING\"),\r\n        ERROR(\"ERROR\"),\r\n        NOCONN(\"UNABLE\"),\r\n        NOCONN_MSG(\"UNABLE TO CONNECT\"),\r\n        NOCONN2(\"NABLETO\"),\r\n        CANERROR(\"CANERROR\"),\r\n        CONNECTED(\"ECU CONNECTED\"),\r\n        BUSBUSY(\"BUSBUSY\"),\r\n        BUSY(\"BUSY\"),\r\n        BUSERROR(\"BUSERROR\"),\r\n        BUSINIERR(\"BUSINIT:ERR\"),\r\n        BUSINIERR2(\"BUSINIT:BUS\"),\r\n        BUSINIERR3(\"BUSINIT:...ERR\"),\r\n        BUS(\"BUS\"),\r\n        FBERROR(\"FBERROR\"),\r\n        DATAERROR(\"DATAERROR\"),\r\n        BUFFERFULL(\"BUFFERFULL\"),\r\n        STOPPED(\"STOPPED\"),\r\n        RXERROR(\"<\"),\r\n        QMARK(\"?\"),\r\n        UNKNOWN(\"\");\r\n        private String response;\r\n\r\n        RSP_ID(String response) {\r\n            this.response = response;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return response;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/obdelm327pro/MainActivity.java b/app/src/main/java/com/obdelm327pro/MainActivity.java
--- a/app/src/main/java/com/obdelm327pro/MainActivity.java	(revision 57fe378d20dacdd43329bb3418b0b8b8e8bd1a5b)
+++ b/app/src/main/java/com/obdelm327pro/MainActivity.java	(date 1712681428852)
@@ -602,7 +602,7 @@
 
                 //append all the values in one large string to be sent to saveToCSV function
                 //Order of the values below ("Vin, AvgSpeed, FuelRate, IdleTime, EngineOnTime, MPG, Date, Time")
-                mileage = String.valueOf(Integer.parseInt(avg_speed)/(Integer.parseInt(engineOnTime)/3600));
+                //mileage = String.valueOf(Integer.parseInt(avg_speed)/(Integer.parseInt(engineOnTime)/3600));
                 String csvData = VIN + ", " + avg_speed + ", " + avg_fuelRate + ", " + idleTime + ", " + engineOnTime + ", " + mileage + ", " + date + ", " + time;
                 //VIN, avg_speed, avg_fuelrate?, idletime(NEEDS WORK), engineOnTime, mileage, date(NEEDS WORK), time(NEEDS WORK)
 
@@ -1797,8 +1797,8 @@
                 //256*A+B
                 val = (256 * A) + B;
                 intval = (int) val;
-                String runTimeMsg = Integer.toString(intval) + " s";
                 engineOnTime = Integer.toString(intval);
+                String runTimeMsg = engineOnTime + " s";
                 runTimeEngStart.setText(runTimeMsg);
                 mConversationArrayAdapter.add("Run time since engine start: " + Integer.toString(intval) + " seconds");
                 break;
@@ -1817,7 +1817,8 @@
                 //(256*A)+B km
                 val = (A * 256) + B;
                 intval = (int) val;
-                String distTravelMsg = Integer.toString(intval) + " km";
+                mileage = Integer.toString(intval);
+                String distTravelMsg = mileage + " km";
                 //this line below sohuld be different?
                 runTimeEngStart.setText(distTravelMsg);
                 mConversationArrayAdapter.add("Distance traveled: " + Integer.toString(intval) + " km");
